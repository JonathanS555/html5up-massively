# -*- coding: utf-8 -*-
"""Doodle.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E1th-2q4oGFj6vm4ldckP9FASVe43UDu
"""



"""# Doodle Machine Learning Model
## Load Data
"""

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.utils import to_categorical

# Load the data
!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/airplane.npy
!wget https://storage.googleapis.com/quickdraw_dataset/full/numpy_bitmap/apple.npy

airplane = np.load('airplane.npy')
apple = np.load('apple.npy')

# Combine the data and create labels
X = np.concatenate((airplane, apple), axis=0)
y = np.concatenate((np.zeros(airplane.shape[0]), np.ones(apple.shape[0])))

# Each row in the data represents a 28x28 image flattened into a 784-length vector
X_images = X.reshape(-1, 28, 28, 1)

# Normalize the images
X_images = X_images / 255.0

# Convert labels to categorical
y = to_categorical(y, num_classes=2)

# Define the model
model = Sequential([
    Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D(pool_size=(2, 2)),
    Conv2D(64, kernel_size=(3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(2, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model and save the training history
history = model.fit(X_images, y, epochs=10, validation_split=0.2)

# Example to visualize one of the drawings
plt.imshow(X_images[0].reshape(28, 28), cmap='gray')
plt.title("Example Drawing")
plt.show()

# Plot the training and validation accuracy/loss
plt.figure(figsize=(12, 4))

# Plot training & validation accuracy values
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(loc='upper left')

# Plot training & validation loss values
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(loc='upper left')

plt.show()

"""## Create Model"""